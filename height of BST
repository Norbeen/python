class Node:
    def __init__(self,data= None):
        self.data= data
        self.left= None
        self.right= None

class BinarySearchTree:
    def __init__(self):
        self.root =None

    def insert(self,data):
        if self.root == None:
            self.root= Node(data)
        else:
            self._insert(self.root, data)

    def _insert(self, cur_node, data):
        if data< cur_node.data:
            if cur_node.left == None:
                cur_node.left= Node(data)
            else:
                self._insert(cur_node.left, data)

        elif data > cur_node.data:
            if cur_node.right == None:
                cur_node.right = Node(data)
            else:
                self._insert(cur_node.right, data)

    def find(self, data):
        if self.root:
            is_found = self._find(data, self.root)
            if is_found:
                return True
            return False
        else:
            return None

    def _find(self, data, cur_node):
        if data>cur_node.data and cur_node.right:
            return self._find(data, cur_node.right)
        elif data<cur_node.data and cur_node.left:
            return self._find(data, cur_node.left)
        if data == cur_node.data:
            return True

    def height(self,node):
        if node == None:
            return 0

        lheight = self.height(node.left)
        rheight = self.height(node.right)

        return 1+ max(lheight, rheight)

    def balanced(self,node):
        if node == None:
            return 0

        lheight = self.height(node.left)
        rheight = self.height(node.right)

        if lheight == rheight:
            print("Tree is Balanced")
        else:
            print("Tree is not balanced")

tree = BinarySearchTree()
tree.insert(4)
tree.insert(6)
tree.insert(2)
tree.insert(8)
tree.insert(3)
if(tree.find(3)):
    print("Element searched was found")
else:
    print("Element searched wasnot found")
print()
print("The height of the tree is: " + str(tree.height(tree.root)))
print()
tree.balanced(tree.root)

